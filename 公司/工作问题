package com.haoxitech.zwaibao.ui.fragment;


import android.app.Fragment;
import android.content.Context;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.BaseExpandableListAdapter;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.PopupWindow;
import android.widget.RadioButton;
import android.widget.TextView;

import com.haoxitech.HaoConnect.HaoConfig;
import com.haoxitech.HaoConnect.HaoConnect;
import com.haoxitech.HaoConnect.HaoResult;
import com.haoxitech.HaoConnect.HaoResultHttpResponseHandler;
import com.haoxitech.HaoConnect.connects.PlatformConnect;
import com.haoxitech.HaoConnect.connects.SubjectConnect;
import com.haoxitech.HaoConnect.results.PlatformResult;
import com.haoxitech.HaoConnect.results.SubjectOptionResult;
import com.haoxitech.HaoConnect.results.SubjectResult;
import com.haoxitech.zwaibao.R;
import com.haoxitech.zwaibao.base.BaseTitleFragment;
import com.haoxitech.zwaibao.model.RecyclerBean;
import com.haoxitech.zwaibao.ui.view.GridViewForListview;
import com.haoxitech.zwaibao.ui.view.GridViewLine;
import com.haoxitech.zwaibao.utils.adapter.CommonAdapter;
import com.haoxitech.zwaibao.utils.adapter.ViewHolder;
import com.haoxitech.zwaibao.view.CustomExpandableListView;
import com.haoxitech.zwaibao.view.NumberPopupWindow;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * A simple {@link Fragment} subclass.
 */
public class CPFragment extends BaseTitleFragment implements View.OnClickListener {

    private GridViewLine gv_calculate_product;
    private CommonAdapter commonAdapter;
    private List<RecyclerBean> productBeans = new ArrayList<RecyclerBean>();
    private CustomExpandableListView elv_cp_product;
    private List<RecyclerBean> needBeans = new ArrayList<RecyclerBean>();
    private List<RecyclerBean> oneBeans = new ArrayList<RecyclerBean>();
    private MyExpandableListAdapter myExpandableListAdapter;
    private EditText et_cp_remark;
    private EditText price_et_name;
    private Button submit_btn;
    private RadioButton rb_unit_price;
    private List<RecyclerBean> priceBeans = new ArrayList<RecyclerBean>();
    private NumberPopupWindow numberPopupWindow;
    private View cp_back;

    @Override
    public int getFragmentLayoutId() {
        return R.layout.fragment_c;
    }

    @Override
    public void initView(View view) {
        super.initView(view);
        setTitle("找外包----只为初创团队提供服务");
        initControl(view);
        initData();
        initEvent();
    }

    private void initControl(View view) {
        gv_calculate_product = (GridViewLine) view.findViewById(R.id.gv_calculate_product);
        commonAdapter = new CommonAdapter<RecyclerBean>(getActivity(), productBeans, R.layout.radius_checkbox) {
            @Override
            public void convert(ViewHolder helper, RecyclerBean recyclerBean) {
                CheckBox cb_check = helper.getView(R.id.cb_check);
                cb_check.setTag(recyclerBean);
                cb_check.setText(recyclerBean.getTitle());
                cb_check.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
                    @Override
                    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                        RecyclerBean recyclerBean = (RecyclerBean) buttonView.getTag();
                        recyclerBean.setOne(isChecked);
                    }
                });
            }
        };
        gv_calculate_product.setAdapter(commonAdapter);

        elv_cp_product = (CustomExpandableListView) view.findViewById(R.id.elv_cp_product);
        elv_cp_product.setGroupIndicator(null);
        myExpandableListAdapter = new MyExpandableListAdapter(getActivity(), oneBeans, needBeans);
        elv_cp_product.setAdapter(myExpandableListAdapter);
        et_cp_remark = (EditText) view.findViewById(R.id.et_cp_remark);
        price_et_name = (EditText) view.findViewById(R.id.price_et_name);
        submit_btn = (Button) view.findViewById(R.id.submit_btn);
        rb_unit_price = (RadioButton) view.findViewById(R.id.rb_unit_price);
        cp_back = view.findViewById(R.id.cp_back);
    }

    private void initData() {
        //请求产品需求列表
        params.put("page", "1");
        params.put("size", "999");
        SubjectConnect.requestList(params, new HaoResultHttpResponseHandler() {
            @Override
            public void onSuccess(HaoResult result) {
                if (result.isResultsOK()) {
                    List<Object> objects = result.findAsList("results>");
                    int i = 0;
                    for (Object object : objects) {
                        List<RecyclerBean> recyclerBeans = new ArrayList<RecyclerBean>();
                        SubjectResult subjectResult = (SubjectResult) object;
                        List<Object> subjectResults = subjectResult.findAsList("results>subjectOption");
                        recyclerBeans.add(new RecyclerBean().setContent("全部选中"));
                        recyclerBeans.add(new RecyclerBean().setContent("收起"));
                        for (Object o : subjectResults) {
                            SubjectOptionResult subjectOptionResult = (SubjectOptionResult) o;
                            recyclerBeans.add(new RecyclerBean().setId(subjectOptionResult.findId() + "").
                                    setContent(subjectOptionResult.findContent() + "").setPrice(subjectOptionResult.findPrice() + "").setIsChecked(subjectOptionResult.findAsInt("isChecked") == 0 ? false : true).setId(subjectOptionResult.findId() + ""));
                        }
                        needBeans.add(new RecyclerBean().setId(subjectResult.findId() + "").setTitle(subjectResult.findTitle() + "").setTwo(true).setRecyclerBeans(recyclerBeans));
                        if (i < (objects.size() / 2 + objects.size() % 2)) {
                            oneBeans.add(new RecyclerBean().setId(subjectResult.findId() + "").setTitle(subjectResult.findTitle() + "").setRecyclerBeans(recyclerBeans));
                        }
                        i++;
                    }
                    if (objects.size() % 2 == 1) {
                        needBeans.get(objects.size() - 1).setTwo(false);
                    }
                    myExpandableListAdapter.notifyDataSetChanged();
                    PlatformConnect.requestList(params, new HaoResultHttpResponseHandler() {
                        @Override
                        public void onSuccess(HaoResult result) {
                            if (result.isResultsOK()) {
                                List<Object> objects = result.findAsList("results>");
                                for (Object object : objects) {
                                    PlatformResult platformResult = (PlatformResult) object;
                                    productBeans.add(new RecyclerBean().setId(platformResult.findId() + "").setTitle(platformResult.findTitle() + ""));
                                }
                                commonAdapter.notifyDataSetChanged();
                            }
                        }
                    }, getActivity());
                }
            }
        }, getActivity());
        HaoConnect.request("price/list", params, null, new HaoResultHttpResponseHandler() {
            @Override
            public void onSuccess(HaoResult result) {
                if (result.isResultsOK()) {
                    List<Object> objects = result.findAsList("results>");
                    for (Object object : objects) {
                        result = (HaoResult) object;
                        String price = result.find("price") + "";
                        price = price.substring(0, price.length() - 1);
                        priceBeans.add(new RecyclerBean().setContent(price).setId(result.find("id") + ""));
                    }
                }
            }
        }, getActivity());
    }

    private void initEvent() {
        submit_btn.setOnClickListener(this);
        rb_unit_price.setOnClickListener(this);
        cp_back.setOnClickListener(this);
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.submit_btn: {
                String remark = et_cp_remark.getText().toString();
                String subject = price_et_name.getText().toString();
                String priceId = "-1";
                for(RecyclerBean priceBean : priceBeans){
                    if(priceBean.getContent().indexOf(rb_unit_price.getText().toString()) != -1){
                        priceId = priceBean.getId();
                        break;
                    }
                }
            }
            break;
            case R.id.rb_unit_price: {
                cp_back.setVisibility(View.VISIBLE);
                if (numberPopupWindow == null) {
                    numberPopupWindow = new NumberPopupWindow(getActivity(), priceBeans, new PopupWindow.OnDismissListener() {
                        @Override
                        public void onDismiss() {
                            cp_back.setVisibility(View.GONE);
                        }
                    }, new AdapterView.OnItemClickListener() {
                        @Override
                        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                            String price = priceBeans.get(position).getPrice();
                            rb_unit_price.setText(price);
                        }
                    });
                }
                numberPopupWindow.showAsDropDown(rb_unit_price);
            }
            break;
            case R.id.cp_back: {
                numberPopupWindow.dismiss();
            }
            break;
        }
    }

    public class MyExpandableListAdapter extends BaseExpandableListAdapter {
        private LayoutInflater mInflater;
        private List<RecyclerBean> oneBeans;
        private List<RecyclerBean> needBeans;
        private boolean isLeft = true;
        private boolean isBeing = false;
        private int selectId = -1;
        private boolean isLoading = false;

        public MyExpandableListAdapter(Context context, List<RecyclerBean> oneBeans, List<RecyclerBean> needBeans) {
            this.mInflater = LayoutInflater.from(context);
            this.oneBeans = oneBeans;
            this.needBeans = needBeans;
        }

        @Override
        public int getGroupCount() {
            return oneBeans.size();
        }

        @Override
        public int getChildrenCount(int groupPosition) {
            return 1;
        }

        @Override
        public Object getGroup(int groupPosition) {
            return this.oneBeans.get(groupPosition);
        }

        @Override
        public Object getChild(int groupPosition, int childPosition) {
            return this.oneBeans.get(groupPosition).getRecyclerBeans().get(childPosition);
        }

        @Override
        public long getGroupId(int groupPosition) {
            return groupPosition;
        }

        @Override
        public long getChildId(int groupPosition, int childPosition) {
            return childPosition;
        }

        @Override
        public boolean hasStableIds() {
            return true;
        }

        @Override
        public View getGroupView(final int groupPosition, final boolean isExpanded, View convertView, ViewGroup parent) {
            final RecyclerBean recyclerBean = needBeans.get(groupPosition * 2);
            int leftId = Integer.parseInt(recyclerBean.getId());
            RecyclerBean rightBean = null;
            if (needBeans.size() != groupPosition * 2 + 1) {
                rightBean = needBeans.get(groupPosition * 2 + 1);
            }
            if (!childSelected.containsKey(leftId)) {
                List<Integer> selectedList = new ArrayList<Integer>();
                for (RecyclerBean r : recyclerBean.getRecyclerBeans()) {
                    if (r.isChecked()) {
                        selectedList.add(r.getPosition() + 2);
                    }
                }
                childSelected.put(leftId, selectedList);
            }
            if (!childSelected.containsKey(groupPosition * 2 + 1)) {
                List<Integer> selectedList = new ArrayList<Integer>();
                for (RecyclerBean r : rightBean.getRecyclerBeans()) {
                    if (r.isChecked()) {
                        selectedList.add(r.getPosition() + 2);
                    }
                }
                childSelected.put(groupPosition * 2 + 1, selectedList);
            }
            ViewHolder viewHolder;
            if (convertView == null) {
                viewHolder = new ViewHolder(getActivity(), parent, R.layout.calculate_price_grid, groupPosition);
            } else {
                viewHolder = (ViewHolder) convertView.getTag();
            }
            View rl_price_right = viewHolder.getView(R.id.rl_price_right);
            if (rightBean != null) {
                rl_price_right.setVisibility(View.VISIBLE);
            } else {
                rl_price_right.setVisibility(View.GONE);
            }
            final TextView tv_price_need_title_left = viewHolder.getView(R.id.tv_price_need_title_left);
            final TextView tv_price_need_title_right = viewHolder.getView(R.id.tv_price_need_title_right);
            final ImageView iv_cpg_left_yes = viewHolder.getView(R.id.iv_cpg_left_yes);
            iv_cpg_left_yes.setVisibility(View.GONE);
            final ImageView iv_cpg_right_yes = viewHolder.getView(R.id.iv_cpg_right_yes);
            iv_cpg_right_yes.setVisibility(View.GONE);
            tv_price_need_title_left.setText(recyclerBean.getTitle());
            if (rightBean != null) {
                tv_price_need_title_right.setText(rightBean.getTitle());
            }
            final CheckBox cb_price_need_left = viewHolder.getView(R.id.cb_price_need_left);
            final CheckBox cb_price_need_right = viewHolder.getView(R.id.cb_price_need_right);
            if (selectId != groupPosition && isLeft) {
                cb_price_need_left.setChecked(false);
                cb_price_need_right.setChecked(false);
            } else if (isLeft) {
                cb_price_need_left.setChecked(true);
                cb_price_need_right.setChecked(false);
            } else if (selectId != groupPosition && !isLeft) {
                cb_price_need_right.setChecked(false);
                cb_price_need_left.setChecked(false);
            } else if (!isLeft) {
                cb_price_need_right.setChecked(true);
                cb_price_need_left.setChecked(false);
            }
            if (childSelected.get(groupPosition * 2).size() > 0 || (childSelected.get(groupPosition * 2).size() == 0 && selectId == groupPosition && isLeft)) {
                iv_cpg_left_yes.setVisibility(View.VISIBLE);
            }
            if (childSelected.get(groupPosition * 2).size() > 0) {
                iv_cpg_left_yes.setVisibility(View.VISIBLE);
            }
            if (childSelected.get(groupPosition * 2 + 1).size() > 0 || (childSelected.get(groupPosition * 2 + 1).size() == 0 && selectId == groupPosition && !isLeft)) {
                iv_cpg_right_yes.setVisibility(View.VISIBLE);
            }
            if (childSelected.get(groupPosition * 2 + 1).size() > 0) {
                iv_cpg_right_yes.setVisibility(View.VISIBLE);
            }
            cb_price_need_left.setTag(iv_cpg_left_yes);
            cb_price_need_left.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    if (isChecked) {
                        iv_cpg_left_yes.setVisibility(View.VISIBLE);
                        iv_cpg_left_yes.setBackgroundResource(R.drawable.product_root_click);
                        tv_price_need_title_left.setTextColor(getResources().getColor(android.R.color.white));
                    } else {
                        if (childSelected.get(groupPosition * 2).size() > 0) {
                            iv_cpg_left_yes.setBackgroundResource(R.drawable.product_root_yes);
                        } else {
                            iv_cpg_left_yes.setVisibility(View.GONE);
                        }
                        tv_price_need_title_left.setTextColor(getResources().getColor(android.R.color.black));
                    }
                }
            });
            cb_price_need_left.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    selectId = groupPosition;
                    if (!isExpanded || (!isLeft && isBeing)) {
                        int count = getGroupCount();
                        for (int i = 0; i < count; i++) {
                            elv_cp_product.collapseGroup(i);
                        }
                        elv_cp_product.expandGroup(groupPosition);
                        isBeing = true;
                    } else {
                        elv_cp_product.collapseGroup(groupPosition);
                        isBeing = false;
                    }
                    isLeft = true;
                    if (!cb_price_need_left.isChecked()) {
                        selectId = -1;
                    }
                }
            });
            cb_price_need_right.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    if (isChecked) {
                        iv_cpg_right_yes.setVisibility(View.VISIBLE);
                        iv_cpg_right_yes.setBackgroundResource(R.drawable.product_root_click);
                        tv_price_need_title_right.setTextColor(getResources().getColor(android.R.color.white));
                    } else {
                        if (childSelected.get(groupPosition * 2 + 1).size() > 0) {
                            iv_cpg_right_yes.setBackgroundResource(R.drawable.product_root_yes);
                        } else {
                            iv_cpg_right_yes.setVisibility(View.GONE);
                        }
                        tv_price_need_title_right.setTextColor(getResources().getColor(android.R.color.black));
                    }
                }
            });
            cb_price_need_right.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    selectId = groupPosition;
                    if (!isExpanded || (isLeft && isBeing)) {
                        int count = getGroupCount();
                        for (int i = 0; i < count; i++) {
                            elv_cp_product.collapseGroup(i);
                        }
                        elv_cp_product.expandGroup(groupPosition);
                        isBeing = true;
                    } else {
                        elv_cp_product.collapseGroup(groupPosition);
                        isBeing = false;
                    }
                    isLeft = false;
                    if (!cb_price_need_right.isChecked()) {
                        selectId = -1;
                    }
                }
            });
            return viewHolder.getConvertView();
        }

        private Map<Integer, List<Integer>> childSelected = new HashMap<Integer, List<Integer>>();

        @Override
        public View getChildView(final int groupPosition, final int childPosition, boolean isLastChild, View convertView, ViewGroup parent) {
            ViewHolder viewHolder;
            if (convertView == null) {
                viewHolder = new ViewHolder(getActivity(), parent, R.layout.need_product_gridview, groupPosition);
            } else {
                viewHolder = (ViewHolder) convertView.getTag();
            }
            GridViewForListview gv_need_product = viewHolder.getView(R.id.gv_need_product);
            List<RecyclerBean> productItems = null;
            if (isLeft) {
                productItems = needBeans.get(groupPosition * 2).getRecyclerBeans();
                gv_need_product.setBackgroundResource(R.drawable.dialog_left_back);
            } else {
                productItems = needBeans.get(groupPosition * 2 + 1).getRecyclerBeans();
                gv_need_product.setBackgroundResource(R.drawable.dialog_right_back);
            }
            gv_need_product.setAdapter(new CommonAdapter<RecyclerBean>(getActivity(), productItems, R.layout.gridview_checkbox) {
                @Override
                public void convert(final ViewHolder helper, final RecyclerBean recyclerBean) {
                    final int position = helper.getPosition();
                    TextView tv_checkbox_operation = helper.getView(R.id.tv_checkbox_operation);
                    TextView tv_checkbox_title = helper.getView(R.id.tv_checkbox_title);
                    final CheckBox cb_checkbox_left = helper.getView(R.id.cb_checkbox_left);
                    ImageView iv_product_child_yes = helper.getView(R.id.iv_product_child_yes);
                    List<Integer> selectedList;
                    if (isLeft) {
                        selectedList = childSelected.get(groupPosition * 2);
                    } else {
                        selectedList = childSelected.get(groupPosition * 2 + 1);
                    }
                    if (selectedList.contains(position)) {
                        iv_product_child_yes.setVisibility(View.VISIBLE);
                    } else {
                        iv_product_child_yes.setVisibility(View.GONE);
                    }
                    if ("全部选中".equals(recyclerBean.getContent())) {
                        tv_checkbox_operation.setText(recyclerBean.getContent());
                        cb_checkbox_left.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
                            @Override
                            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                                List<Integer> selectedList;
                                if (isLeft) {
                                    selectedList = childSelected.get(groupPosition * 2);
                                } else {
                                    selectedList = childSelected.get(groupPosition * 2 + 1);
                                }
                                int count = getCount();
                                for (int i = 2; i < count; i++) {
                                    if (!selectedList.contains(i)) {
                                        selectedList.add(i);
                                    }
                                }
                                recyclerBean.setContent("全部取消");
                                notifyDataSetChanged();
                            }
                        });
                    } else if ("全部取消".equals(recyclerBean.getContent())) {
                        tv_checkbox_operation.setText(recyclerBean.getContent());
                        cb_checkbox_left.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
                            @Override
                            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                                List<Integer> selectedList;
                                if (isLeft) {
                                    selectedList = childSelected.get(groupPosition * 2);
                                } else {
                                    selectedList = childSelected.get(groupPosition * 2 + 1);
                                }
                                selectedList.clear();
                                recyclerBean.setContent("全部选中");
                                notifyDataSetChanged();
                            }
                        });
                        tv_checkbox_title.setGravity(Gravity.CENTER_HORIZONTAL);
                    } else if ("收起".equals(recyclerBean.getContent())) {
                        selectId = -1;
                        tv_checkbox_operation.setText(recyclerBean.getContent());
                        cb_checkbox_left.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
                            @Override
                            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                                elv_cp_product.collapseGroup(groupPosition);
                            }
                        });
                        tv_checkbox_title.setGravity(Gravity.CENTER_HORIZONTAL);
                    } else {
                        cb_checkbox_left.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
                            @Override
                            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                                List<Integer> selectedList;
                                if (isLeft) {
                                    selectedList = childSelected.get(groupPosition * 2);
                                } else {
                                    selectedList = childSelected.get(groupPosition * 2 + 1);
                                }
                                if (!selectedList.contains(position)) {
                                    selectedList.add(position);
                                } else {
                                    for (int i = 0; i < selectedList.size(); i++) {
                                        if (position == selectedList.get(i)) {
                                            selectedList.remove(i);
                                            break;
                                        }
                                    }
                                }
                                notifyDataSetChanged();
                            }
                        });
                        tv_checkbox_title.setText(recyclerBean.getContent());
                    }
                }
            });
            return viewHolder.getConvertView();
        }

        @Override
        public boolean isChildSelectable(int groupPosition, int childPosition) {
            return false;
        }

    }

}
