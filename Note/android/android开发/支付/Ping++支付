// 设置要使用的支付方式
PayActivity.SHOW_CHANNEL_WECHAT = true;
PayActivity.SHOW_CHANNEL_UPMP = true;
PayActivity.SHOW_CHANNEL_BFB = true;
PayActivity.SHOW_CHANNEL_ALIPAY = true;

// 产生个订单号
String orderNo = new SimpleDateFormat("yyyyMMddhhmmss")
		.format(new Date());

// 计算总金额（以分为单位）
int amount = 0;
JSONArray billList = new JSONArray();
for (Good good : mList) {
	amount += good.getPrice() * good.getCount() * 100;
	billList.put(good.getName() + " x " + good.getCount());
}
// 自定义的额外信息 选填
JSONObject extras = new JSONObject();
try {
	extras.put("extra1", "extra1");
	extras.put("extra2", "extra2");
} catch (JSONException e) {
	e.printStackTrace();
}

// 构建账单json对象
JSONObject bill = new JSONObject();
JSONObject displayItem = new JSONObject();
try {
	displayItem.put("name", "商品");
	displayItem.put("contents", billList);
	JSONArray display = new JSONArray();
	display.put(displayItem);
	bill.put("order_no", orderNo);
	bill.put("amount", amount);
	bill.put("display", display);
	bill.put("extras", extras);// 该字段选填
} catch (JSONException e) {
	e.printStackTrace();
}
// 发起支付
PayActivity.CallPayActivity(this, bill.toString(), URL);

返回数据：onActivityResult
if (requestCode == PayActivity.PAYACTIVITY_REQUEST_CODE) {
	if (resultCode == PayActivity.PAYACTIVITY_RESULT_CODE) {
		Toast.makeText(
				this,
				data.getExtras().getString("result") + "  "
						+ data.getExtras().getInt("code"),
				Toast.LENGTH_LONG).show();
	}
}
