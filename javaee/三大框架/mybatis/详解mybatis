基础知识
对原生jdbc程序(单独使用jdbc开发)问题总结
mybatis框架原理
mybatis入门程序(用户的增删改查)
mybatis开发dao两种方法：
    原始dao开发方法(程序需要编写dao接口和实现类)
    mybatis的mapper接口(相当于dao接口)代理开发方法
mybatis配置文件SqlMapConfig.xml
mybatis核心：
    mybatis输入映射
    mybatis输出映射
mybatis的动态sql

高级知识
订单商品数据模型分析
高级结果集映射(一对一、一对多、多对多)
mybatis延迟加载
mybatis查询缓存(一级缓存、二级缓存)
mybatis和spring进行整合
mybatis逆向工程

对原生jdbc程序(单独使用jdbc开发)问题总结
public static void main(String[] args) {
    Connection connection = null;
    PreparedStatement statement = null;
    ResultSet resultSet = null;
    try {
        Class.forName("com.mysql.jdbc.Driver");
        connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8", "root", "root");
        String sql = "select * from user where username = ?";
        statement = connection.prepareStatement(sql);
        statement.setString(1, "王五");
        resultSet = statement.executeQuery();
        while(resultSet.next()){
            System.out.println(resultSet.getString("id") + "-" + resultSet.getString("username"));
        }
    } catch (Exception e) {
        
    }finally {
        try {
            if(connection != null){
                connection.close();
            }
            if(statement != null){
                statement.close();
            }
            if(resultSet != null){
                resultSet.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
问题总结
1、数据库连接，使用时就创建，不使用立即释放，对数据库进行频繁连接开启和关闭，造成数据库资源浪费，影响数据库性能。
设想：使用数据库连接池管理数据库连接
2、将sql语句硬编码到java代码中，如果sql语句修改，需要重新编译java代码，不利于系统维护
设想：将sql语句配置在xml配置文件中，即使sql变化，不需要对java代码重新编译。
3、向prepareStatement中设置参数，对占位符位置和设置参数值，硬编码在java代码中，不利于系统维护
设想：将sql语句及占位符和参数全部设置在xml中
4、从resultSet中遍历结果集数据时，存在硬编码，将获取表的字段进行硬编码，不利于系统维护
设想：将查询的结果集，自动映射成java对象

mybatis是什么？
mybatis是一个持久层框架，mybatis是一个不完全的ORM框架。sql语句需要程序员自己开发，但是mybatis也有映射(输入映射、输出映射)。
mybatis入门门槛不高，学习成本高，让程序员把精力放在sql语句上，对sql语句优化非常方便，适用与需求变化较多项目，比如互联网项目。
mybatis让程序将主要精力放在sql上，通过mybatis提供的映射放射，自动灵活生成(半自动化，大部分需要程序员编写sql)满足需要sql语句。
mybatis可以将向prepareStatement中的输入参数自动进行输入映射(statement.setString(1, "王五"))，将查询结果集灵活映射成java对象(输出映射(resultSet.getString("id")))。

mybatis框架
1、SqlMapConfig.xml(是mybatis的全局配置文件)，配置了数据源、事务等mybatis运行环境配置映射文件(配置sql语句)
mapper.xml(映射文件)、mapper.xml...
2、SqlSessionFactory(会话工厂)
作用：创建SqlSession
3、SqlSession(会话)，是一个接口，面向用户(程序员)的接口
作用：操作数据库(发出sql增删改查)
4、Executor(执行器)，是一个接口(基本执行器、缓存执行器)
作用：SqlSession内部通过执行器操作数据库
5、mappedStatement(底层封装对象)
作用：对操作数据库存储封装，包括sql语句，输入参数，输出结果类型
6、输入参数类型：java简单类型、hashmap、pojo自定义
7、输出参数类型：java简单类型、hashmap、pojo自定义

mybatis框架执行过程：
1.配置mybatis的配置文件，sqlMapConfig.xml(名称不固定)
2.通过配置文件，加载mybatis运行环境，创建SqlSessionFactory会话工厂
    SqlSessionFactory在实际使用时按单例方式。
3.通过SqlSessionFactory创建SqlSession
    SqlSession是一个面向用户的接口(提供操作数据库方法)，实现对象是线程不安全的，建议SqlSession应用场合在方法体内。
4.调用SqlSession的方法去操作数据
    如果需要提交事务，需要执行SqlSession的commit()方法。
5.释放资源，关闭SqlSession.

SqlMapConfig.xml
1.配置mybatis的运行环境，数据源、事务等
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration
PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-config.dtd" >
<configuration>

    <environments default="development">
        <environment id="development">
        <!-- 使用jdbc事务管理，事务由mybatis控制 -->
            <transactionManager type="JDBC" />
            <dataSource type="POOLED">
                <property name="driverClassName" value="com.mysql.jdbc.Driver" />
                <property name="url" value="jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8" />
                <property name="username" value="root" />
                <property name="password" value="root" />
            </dataSource>
        </environment>
    </environments>

</configuration>

根据用户id主键查询用户信息
1.pojo类
public class User {
    private int id;
    private String username;
    private Date birthday;
    private String sex;
    private String address;

2.映射文件(User.xml，mapper代理开发映射文件名称为UserMapper.xml)
在映射文件中配置sql语句
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<!-- namespace命名空间，作用就是对sql进行分类管理，理解sql隔离
注意：使用mapper代理方法开发，namespace有特殊重要的作用
 -->
<mapper namespace="test">

    <!-- 在映射文件中配置很多sql语句 -->
    <!-- 通过select执行数据库查询
    id：标识映射文件的sql，称为statement的id，将语句
    封装到mappedStatement对象中，所以将id称为statement的id
    parameterType：指定參數的類型，这里指定int类型
    #{}表示一个占位符号
    #{id}：其中的id表示接收输入的参数，参数名称就是id，
    如果参数是简单类型，#{}中的参数名可以任意，可以value或其它名称
    resultType指定sql输出结果的所映射的java对象类型，
    select指定resultType表示将单条记录映射成的java对象.
     -->
     <select id="findUserById" parameterType="int">
        select * from user where id = #{value}
     </select>
    
</mapper>

在SqlMapConfig.xml加载映射文件





mybatis开发dao的方法：
1.原始dao的方法
    需要程序员编写mapper接口(就是dao接口)
    程序员在编写mapper.xml(映射文件)和mapper.java需要遵循一个开发规范
    1.mapper.xml中namespace就是mapper.java的类全路径
    2.mapper.xml中statement的id和mapper.java中方法名一致
    3.mapper.xml中statement的parameterType指定输入参数的类型和mapper.java的方法输入参数类型一致
    4.mapper.xml中statement的returnType指定输出结果的类型和mapper.java的方法返回类型一致

SqlMapConfig配置文件，可以配置properties属性、别名、mapper加载...

输入映射
parameterType:指定输入参数类型可以简单类型、pojo、hashmap...
对于综合查询，建议parameterType使用包装的pojo，有利于系统扩展

输出映射
resultType:
    查询到的列名和resultType指定的pojo的属性名一致，才能映射成功
resultMap:
    可以通过resultMap完成一些高级映射。
    如果查询到的列名和映射的pojo的属性名不一致时，通过resultMap设置列名和属性名之间的对应关系(映射关系)。可以完成映射。
    高级映射：
        将关联查询的列映射到一个pojo属性中。(一对一)
        将关联查询的列映射到一个list<pojo>中。(一对多)

动态sql:
if判断
where
sql片段
foreach




